services:
  vote:
    build: ./vote
    ports: ["8080:5000"]
    env_file: [.env]
    networks: [votenet]
    depends_on: { redis: { condition: service_healthy } }
    restart: on-failure
  result:
    build: ./result
    ports: ["3000:3000"]
    env_file: [.env]
    networks: [votenet]
    depends_on: { database: { condition: service_healthy } }
    restart: on-failure
  worker:
    build: ./worker
    env_file: [.env]
    networks: [votenet]
    depends_on: { database: { condition: service_healthy }, redis: { condition: service_healthy } }
    restart: on-failure
  redis:
    image: "redis:7-alpine"
    networks: [votenet]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
  database:
    image: "postgres:15-alpine"
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes: ["pgdata:/var/lib/postgresql/data"]
    networks: [votenet]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
networks:
  votenet:
    driver: bridge
volumes:
  pgdata: