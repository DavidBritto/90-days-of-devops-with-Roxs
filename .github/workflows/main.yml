name: CI/CD Pipeline para Voting App

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # --- TRABAJO 1: CONSTRUIR IMÁGENES Y SUBIRLAS A DOCKER HUB ---
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Login a Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push VOTE
        uses: docker/build-push-action@v5
        with:
          context: ./voting-app/roxs-voting-app/vote
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/vote:latest

      - name: Build and push WORKER
        uses: docker/build-push-action@v5
        with:
          context: ./voting-app/roxs-voting-app/worker
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/worker:latest

      - name: Build and push RESULT
        uses: docker/build-push-action@v5
        with:
          context: ./voting-app/roxs-voting-app/result
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/result:latest

  # --- TRABAJO 2: DESPLEGAR LA APLICACIÓN EN TU SERVIDOR ---
  deploy:
    needs: build-and-push
    runs-on: self-hosted
    
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4
      
      - name: Crear archivo .env en el runner
        run: |
          echo "Creando archivo .env..."
          cd voting-app/roxs-voting-app
          
          echo "REDIS_HOST=redis" > .env
          echo "DATABASE_HOST=database" >> .env
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          
          echo "Archivo .env creado con éxito."

      - name: Desplegar con Docker Compose
        run: |
          cd voting-app/roxs-voting-app
          # --- CORRECCIÓN CLAVE ---
          # Usamos la versión con guion que nuestro nuevo Vagrantfile instala.
          docker-compose pull
          docker-compose up -d
